{"version":3,"sources":["components/Header.js","components/Footer.js","container/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","Footer","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","onSubmit","type","onChange","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAWeA,MATf,WACC,OACC,gCACC,yBAAKC,UAAU,aAAaC,IAAI,iEAAiEC,IAAI,aACrG,gD,KCGYC,MANf,WACC,OACC,kD,kDCuEaC,E,YAzEd,aAAgB,IAAD,8BACd,+CACKC,MAAQ,CACZC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATL,E,iFAYM,IAAD,OACnBE,MAAM,qCACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACXE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CAAEV,YAAaQ,S,mCAInBG,GAAO,IAAD,EACMA,EAAMC,OAAtBC,EADU,EACVA,KAAMC,EADI,EACJA,MACdC,KAAKL,SAAL,eAAiBG,EAAOC,M,mCAMZH,GACZA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,YAAYqB,QAC5DC,EAAcP,KAAKnB,MAAMI,YAAYiB,GAASM,IACpDR,KAAKL,SAAS,CAAEX,UAAWuB,M,+BAY3B,OACC,yBAAK/B,UAAU,YACd,0BAAMA,UAAU,YAAYiC,SAAUT,KAAKZ,cAC1C,2BAAQsB,KAAK,OACXZ,KAAK,UACLC,MAAOC,KAAKnB,MAAMC,QAClB6B,SAAUX,KAAKd,aACf0B,YAAY,aAEd,2BAAQF,KAAK,OACXZ,KAAK,aACLC,MAAOC,KAAKnB,MAAME,WAClB4B,SAAUX,KAAKd,aACf0B,YAAY,gBAEd,6CAED,yBAAKpC,UAAU,QACb,yBAAKA,UAAU,YAAYC,IAAKuB,KAAKnB,MAAMG,UAAWN,IAAI,WAC1D,wBAAIF,UAAU,OAAOwB,KAAKnB,MAAMC,SAChC,wBAAIN,UAAU,UAAUwB,KAAKnB,MAAME,kB,GAlEb8B,aCebC,MAXf,WACE,OACE,yBAAKtC,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,iB","file":"static/js/main.544b227e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header(){\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<img className=\"header-img\" src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" alt=\"Problem?\" />\r\n\t\t\t<h1>Meme Generator</h1>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport '../styles.css'\r\n\r\nfunction Footer(){\r\n\treturn (\r\n\t\t<footer>I am a footer</footer>\r\n\t)\r\n}\r\n\r\nexport default Footer","import React, {Component} from 'react'\r\n\r\nclass MemeGenerator extends Component {\r\n\tconstructor () {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\ttopText: \"\",\r\n\t\t\tbottomText: \"\",\r\n\t\t\trandomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n\t\t\tallMemeImgs: []  \r\n\t\t}\r\n\tthis.handleChange = this.handleChange.bind(this)\t\r\n\tthis.handleSubmit = this.handleSubmit.bind(this)\t\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch(\"https://api.imgflip.com/get_memes\")\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\tconst {memes} = response.data\r\n\t\t\t\tthis.setState({ allMemeImgs: memes })\r\n\t\t\t})\t\t\r\n\t}\r\n\r\n\thandleChange(event){\r\n\t\tconst { name, value } = event.target\t\t\r\n\t\tthis.setState({ [name]: value })\t\t\r\n\t}\r\n/*\r\nhandleChange\r\n-text from box shows up on the image\r\n*/\r\n\thandleSubmit(event){\r\n\t\tevent.preventDefault()\r\n\t\tconst randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n\t\tconst randMemeImg = this.state.allMemeImgs[randNum].url\r\n\t\tthis.setState({ randomImg: randMemeImg })\r\n\t}\t \r\n\r\n/*\r\nhandleSubmit\r\n-prevents the initial image from displaying\r\n-get a random item [index] from the array that's the lenth of all the images\r\n-set randomImg to the .url of the random item [index] \r\n*/\r\n\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"App-body\">\r\n\t\t\t\t<form className=\"form-meme\" onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<input \ttype=\"text\" \r\n\t\t\t\t\t\t\tname=\"topText\" \r\n\t\t\t\t\t\t\tvalue={this.state.topText} \r\n\t\t\t\t\t\t\tonChange={this.handleChange} \r\n\t\t\t\t\t\t\tplaceholder=\"Top text\" \r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<input \ttype=\"text\" \r\n\t\t\t\t\t\t\tname=\"bottomText\" \r\n\t\t\t\t\t\t\tvalue={this.state.bottomText} \r\n\t\t\t\t\t\t\tonChange={this.handleChange} \r\n\t\t\t\t\t\t\tplaceholder=\"Bottom text\" \r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button>Generate</button>\r\n\t\t\t\t</form>\r\n\t\t\t\t<div className=\"meme\">\r\n\t\t\t\t\t\t<img className=\"meme-imgs\" src={this.state.randomImg} alt=\"photos\" />\r\n\t\t\t\t\t\t<h2 className=\"top\">{this.state.topText}</h2>\r\n\t\t\t\t\t\t<h2 className=\"bottom\">{this.state.bottomText}</h2>\t\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\nexport default MemeGenerator","import React from 'react'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport MemeGenerator from './container/MemeGenerator'\nimport './styles.css'\n\nfunction App() {\n  return(\n    <div className=\"App-wrapper\">\n      <Header />\n      <MemeGenerator />\n      <Footer />      \n    </div>\n    )\n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}